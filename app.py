# app.py
import streamlit as st
import pandas as pd
import numpy as np
import pickle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="DebtRecovery Predictor", layout="centered")
st.title("‚öñÔ∏è DebtRecovery Predictor")
st.markdown("–û—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—É–¥–µ–±–Ω–æ–≥–æ –≤–∑—ã—Å–∫–∞–Ω–∏—è –¥–æ–ª–≥–æ–≤")

try:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
    with open('model_rf.pkl', 'rb') as f:
        model = pickle.load(f)
    with open('encoder.pkl', 'rb') as f:
        encoder = pickle.load(f)
    
    df = pd.read_csv('synthetic_court_cases.csv')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    with st.sidebar:
        st.header("üìä –û –º–æ–¥–µ–ª–∏")
        st.success("**–¢–æ—á–Ω–æ—Å—Ç—å: 82.6%**")
        st.write("–û–±—É—á–µ–Ω–∞ –Ω–∞ 8000+ –¥–µ–ª–∞—Ö")
        st.write("**–¢–æ–ø-3 —Ñ–∞–∫—Ç–æ—Ä–∞:**")
        st.write("1. –¢–∏–ø –¥–æ–ª–∂–Ω–∏–∫–∞ (25.9%)")
        st.write("2. –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å—É–¥—å–∏ (19.4%)") 
        st.write("3. –ù–∞–ª–∏—á–∏–µ –∑–∞–ª–æ–≥–∞ (11.4%)")
        st.write(f"–£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–ª: {df['result'].mean():.1%}")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.header("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    
    with st.form("case_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            court_region = st.selectbox("–†–µ–≥–∏–æ–Ω —Å—É–¥–∞", [
                '–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª.', '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª.',
                '–†–µ—Å–ø. –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π', '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª.'
            ], index=0)
            
            debtor_type = st.selectbox("–¢–∏–ø –¥–æ–ª–∂–Ω–∏–∫–∞", [
                '–§–õ', '–ò–ü', '–û–û–û (–º–∏–∫—Ä–æ)', '–û–û–û (–º–∞–ª–æ–µ)', '–û–û–û (—Å—Ä–µ–¥–Ω–µ–µ)'
            ], index=0)
            
            claim_amount = st.number_input("–°—É–º–º–∞ –∏—Å–∫–∞ (—Ä—É–±.)", 
                min_value=10000, value=150000, step=10000)
        
        with col2:
            has_pledge = st.radio("–ù–∞–ª–∏—á–∏–µ –∑–∞–ª–æ–≥–∞", ["–ù–µ—Ç", "–î–∞"], index=0)
            has_guarantor = st.radio("–ù–∞–ª–∏—á–∏–µ –ø–æ—Ä—É—á–∏—Ç–µ–ª—è", ["–ù–µ—Ç", "–î–∞"], index=0)
            judge_grant_rate = st.slider("–°—Ç–∞–≤–∫–∞ —Å—É–¥—å–∏", 0.3, 0.9, 0.6, 0.05)
        
        submitted = st.form_submit_button("üéØ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", use_container_width=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    if submitted:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        input_data = pd.DataFrame([{
            'court_region': court_region,
            'debtor_type': debtor_type,
            'judge_id': 'judge_default',
            'judge_grant_rate': judge_grant_rate,
            'claim_amount': claim_amount,
            'has_pledge': 1 if has_pledge == "–î–∞" else 0,
            'has_guarantor': 1 if has_guarantor == "–î–∞" else 0
        }])
        
        try:
            # –ü—Ä–æ–≥–Ω–æ–∑
            X_cat = encoder.transform(input_data[['court_region', 'debtor_type', 'judge_id']])
            X_num = input_data[['judge_grant_rate', 'claim_amount', 'has_pledge', 'has_guarantor']]
            X_input = np.hstack([X_num, X_cat])
            
            probability = model.predict_proba(X_input)[0][1]
            
            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.success("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞", f"{probability:.1%}")
            with col2:
                result = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–æ" if probability > 0.5 else "–û—Ç–∫–∞–∑–∞–Ω–æ"
                st.metric("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –∏—Å—Ö–æ–¥", result)
            
            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            st.info("### üìù –§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è:")
            
            if debtor_type == '–§–õ':
                st.write("üîª **–¢–∏–ø –¥–æ–ª–∂–Ω–∏–∫–∞ (–§–õ)**: —Å–Ω–∏–∂–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
            else:
                st.write("üî∫ **–¢–∏–ø –¥–æ–ª–∂–Ω–∏–∫–∞ (–±–∏–∑–Ω–µ—Å)**: –ø–æ–≤—ã—à–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
            
            if has_pledge == "–î–∞":
                st.write("üî∫ **–ó–∞–ª–æ–≥**: –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã")
            
            if has_guarantor == "–î–∞":
                st.write("üî∫ **–ü–æ—Ä—É—á–∏—Ç–µ–ª—å**: —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
                
        except Exception as e:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            st.write(str(e))

except Exception as e:
    st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    st.info("""
    **–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –ø–∞–ø–∫–µ –µ—Å—Ç—å:**
    - model_rf.pkl (–º–æ–¥–µ–ª—å)
    - encoder.pkl (—ç–Ω–∫–æ–¥–µ—Ä)
    - synthetic_court_cases.csv (–¥–∞–Ω–Ω—ã–µ)
    """)